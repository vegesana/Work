package debug

import (
	"fmt"
	"strconv"
)

// Place HOlder Functions
func CounterFun(line lineData) {

	server := line.getFileName()
	text := line.getText()

	// End Delimiter to know that paragraph ended. Not alway new line
	// is deliimter - check the ncdutil output to know what is hte
	// delimiter
	if text == "" {
		counterHandler(server, TempCntrInfo[server])
		TempCntrInfo[server] = ""
	} else {

		TempCntrInfo[server] = TempCntrInfo[server] + text
	}
	return
}

func counterHandler(name string, data string) {
	expression, count := autoGeneratedCounterExpr()
	if mymap, err := getKeyValue(data, expression, count); err == nil {
		processCounterValuesNew(name, mymap)
	}
}

func processCounterValuesNew(server string, mmap map[string]string) {
	keySlice := []string{"Bad Octets Received", "MAC Transmit Error",
		"Excessive Collision", "Drop Events", "MAC RX Err Pkt Rcvd",
		"Bad CRC", "Collisions", "Late Collision", "Bad FC Received"}

	for _, key := range keySlice {
		if intValue, err := strconv.Atoi(mmap[key]); err == nil {
			if intValue != 0 {
				errstr := fmt.Sprintf("Port:%s have Error:%s:%d\n",
					mmap["Port"], key, intValue)
				writeToDb(MyError{server, errstr})
			}
		} else {
			Error("Count not convert the index Integr", key)
		}
	}
}
